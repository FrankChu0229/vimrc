"---------------------------------------------
" Vundle Part
"---------------------------------------------
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

filetype plugin indent on

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'davidhalter/jedi-vim'
"Plugin 'Lokaltog/powerline' , {'rtp': 'powerline/bindings/vim/'}
Plugin 'scrooloose/nerdtree'
Plugin 'kreeger/benlight'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'sjl/badwolf'
"Plugin 'vim-ruby/vim-ruby'
Plugin 'fatih/vim-go'
"https://github.com/fatih/vim-go, :GoInstallBinaries  to install necessary binaries




call vundle#end()            " required

"---------------------------------------------
" for Golang
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1


set paste

" press c to comment current line 
nmap c ^i#<Esc>j

set foldmethod=indent
set foldlevel=99
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set number
set ruler                   " show the cursor position all the time
set autoread                " auto read when file is changed from outside
set hlsearch                " search highlighting
"set clipboard=unnamed       " yank to the system register (*) by default
set showmatch               " Cursor shows matching ) and }
set showmode                " Show current mode
set wildchar=<TAB>          " start wild expansion in the command line using <TAB>
set wildmenu                " wild char completion menu
set autoindent      " auto indentation
set incsearch       " incremental search
set nobackup        " no *~ backup files
set copyindent      " copy the previous indentation on autoindenting
set ignorecase      " ignore case when searching
set smartcase       " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab        " insert tabs on the start of a line according to context
" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


syntax on                    " syntax highlighing
"filetype on                  " try to detect filetypes
"filetype plugin indent on    " enable loading indent file for filetype

vnoremap < <gv
vnoremap > >gv
set laststatus=2

" auto apply the pep8 format for the src code
" install pep8 and autopep8 first, you can use pip to install them
map <F4> :call FormartSrc()<CR>
"define FormartSrc()                                                               
func FormartSrc()                                                               
    exec "w"                                                                    
    if &filetype == 'c'                                                         
        exec "!astyle --style=ansi --one-line=keep-statements -a --suffix=none %"
    elseif &filetype == 'cpp' || &filetype == 'hpp'                             
        exec "r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %> /dev/null 2>&1"
    elseif &filetype == 'perl'                                                  
        exec "!astyle --style=gnu --suffix=none %"                              
    elseif &filetype == 'py'||&filetype == 'python'                             
        exec "r !autopep8 -i --aggressive %"                                    
    elseif &filetype == 'java'                                                  
        exec "!astyle --style=java --suffix=none %"                             
    elseif &filetype == 'jsp'                                                   
        exec "!astyle --style=gnu --suffix=none %"                              
    elseif &filetype == 'xml'                                                   
        exec "!astyle --style=gnu --suffix=none %"                              
    endif                                                                       
    exec "e! %"                                                                 
endfunc


map <F5> :call MarkedownFile()<CR>

func MarkedownFile()
    exec "w"
    exec "r !mark %"
endfunc



"---------------------------------------------
" ENCODING SETTINGS
"---------------------------------------------
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileformat=unix


fun! ViewUTF8()
    set encoding=utf-8
    set termencoding=big5
endfun

fun! UTF8()
    set encoding=utf-8
    set termencoding=big5
    set fileencoding=utf-8
    set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
    set encoding=big5
    set fileencoding=big5
endfun


filetype plugin indent on    " required

map <F2> :NERDTreeToggle<CR>
colorscheme badwolf

"let g:jedi#goto_command = ""
"let g:jedi#goto_assignments_command = "<leader>g"
"let g:jedi#goto_definitions_command = "<leader>d"
"let g:jedi#documentation_command = "K"
"let g:jedi#usages_command = "<leader>n"
"let g:jedi#completions_command = "<C-x>"
"let g:jedi#rename_command = "<leader>r"
"
"let g:jedi#completions_enabled = 0

"---------------------------------------------
" ENCODING SETTINGS
"---------------------------------------------
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileformat=unix


fun! ViewUTF8()
    set encoding=utf-8
    set termencoding=big5
endfun

fun! UTF8()
    set encoding=utf-8
    set termencoding=big5
    set fileencoding=utf-8
    set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
    set encoding=big5
    set fileencoding=big5
endfun


" MacVim GUI mode
if has("gui_macvim")
    "set guifont=Monaco:h14
    set guifontwide=Menlo\ Regular:h17
    set guifont=Menlo\ Regular:h17
    set guioptions=aAce
    set fuoptions=maxvert,maxhorz
    set noballooneval
    
    " resize current buffer by +/- 5
    nnoremap <M-Right> :vertical resize +5<CR>
    nnoremap <M-Left>  :vertical resize -5<CR>
    nnoremap <M-Up>    :resize -5<CR>
    nnoremap <M-Down>  :resize +5<CR>
    
    " Command+Option+Right for next
    map <D-M-Right> :tabn<CR>
    " Command+Option+Left for previous
    map <D-M-Left> :tabp<CR>
    
    " Automatically resize splits
    " when resizing MacVim window
    autocmd VimResized * wincmd =
endif
